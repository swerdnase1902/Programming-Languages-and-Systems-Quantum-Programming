Simon's problem:

Input: a function f: {0,1}^n â†’ {0,1}^n.

Assumption: there exists s in {0,1}^n such that forall x,y: [f(x) = f(y)] iff [(x+y) in {0^n, s}].

Output: s.

Notation:

{0,1}^n is the set of bit strings of length n, s is an unknown bit string of length n, = is comparison of bit strings of length n, + is pointwise addition mod 2 of bit strings of length n,  and 0^n is a bit string of length n with all 0.



Grover's problem:

Input: a function f from a bit string of length n to a single bit.

Output: 1 if there exists a bit string x of length n such that f(x) = 1, and 0 otherwise.



The assignment:

On a classical computer, in a classical language of your choice (such as Java, C, Python, etc), program solutions to Simon's problem and to Grover's problem.  In each case, treat the input function f as black box that you can call (but cannot inspect in any way at all).  Each solution will be code that includes one or more calls of f.

Submit two files, one for each problem.  Write detailed comments in the code about why it works.